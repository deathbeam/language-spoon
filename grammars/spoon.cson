'name': 'Spoon'
'comment': 'Spoon language 0.1.0 syntax'
'scopeName': 'source.spoon'
'firstLineMatch': '^#!.*\\bspoon'

'fileTypes': [
  'spoon'
  'Spoonfile'
]

'patterns': [
  {
    'include': '#comment'
  }
  {
    'include': '#heredoc'
  }
  {
    'include': '#string'
  }
  {
    'include': '#regexp'
  }
  {
    'include': '#annotations'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#class'
  }
  {
    'include': '#function'
  }
  {
    'include': '#assign'
  }
  {
    'include': '#instance_variable'
  }
  {
    'include': '#numeric'
  }
]

'repository':
  'annotations':
    'patterns': [
      {
        'begin': '(\\\\:?[^ (]+)(\\()'
        'beginCaptures':
          '1':
            'name': 'storage.type.annotation.spoon'
          '2':
            'name': 'punctuation.definition.annotation-arguments.begin.bracket.round.spoon'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.annotation-arguments.end.bracket.round.spoon'
        'name': 'meta.declaration.annotation.spoon'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.other.key.spoon'
              '2':
                'name': 'keyword.operator.assignment.spoon'
            'match': '(\\w*)\\s*(=)'
          }
          {
            'include': '$self'
          }
          {
            'match': ','
            'name': 'punctuation.separator.delimiter.spoon'
          }
        ]
      }
      {
        'match': '\\\\:?\\w*'
        'name': 'storage.type.annotation.spoon'
      }
    ]

  'constants':
    'patterns': [
      {
        'match': '(?:(?:\\b(?!-))|(?:^\\s*))(break|catch|continue|else|for|in|import|to|if|return|switch|throw|try|unless|until|when|while|loop|do)(?:(?:(?!-)\\b)|(?:\\s*$))'
        'name': 'keyword.control.spoon'
      }
      {
        'match': '(?:(?:\\b(?!-))|(?:^\\s*))(true|false|null)(?:(?:(?!-)\\b)|(?:\\s*$))'
        'name': 'constant.language.spoon'
      }
      {
        'match': '(?:(?:\\b(?!-))|(?:^\\s*))(self)(?:(?:(?!-)\\b)|(?:\\s*$))'
        'name': 'variable.language.self.spoon'
      }
      {
        'match': '(?:(?:\\b(?!-))|(?:^\\s*))(this)(?:(?:(?!-)\\b)|(?:\\s*$))'
        'name': 'variable.language.this.spoon'
      }
      {
        'match': '(?:(?:\\b(?!-))|(?:^\\s*))(super)(?:(?:(?!-)\\b)|(?:\\s*$))'
        'name': 'variable.language.super.spoon'
      }
    ]

  'operators':
    'patterns': [
      {
        'match': '(\\.\\.)'
        'name': 'keyword.control.directive.spoon'
      }
      {
        'match': '((?:\\b(?:isnt|is)\\b)|(?:==|!=|<=|>=|<>|<|>))'
        'name': 'keyword.operator.comparison.spoon'
      }
      {
        'match': '((?:\\b(?:not|and|or)\\b)|(?:!|&&|\\|\\|))'
        'name': 'keyword.operator.logical.spoon'
      }
      {
        'match': '(=)'
        'name': 'keyword.operator.assignment.spoon'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.spoon'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.spoon'
      }
      {
        'match': ','
        'name': 'meta.delimiter.object.comma.spoon'
      }
      {
        'match': '\\.'
        'name': 'meta.delimiter.method.period.spoon'
      }
      {
        'match': '\\{|\\}'
        'name': 'meta.brace.curly.spoon'
      }
      {
        'match': '\\(|\\)'
        'name': 'meta.brace.round.spoon'
      }
      {
        'match': '\\[|\\]'
        'name': 'meta.brace.square.spoon'
      }
    ]

  'class':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'storage.type.class.spoon'
          '2':
            'name': 'keyword.control.inheritance.spoon'
          '3':
            'name': 'entity.other.inherited-class.spoon'
        'match': '(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)'
        'name': 'meta.class.spoon'
      }
      {
        'captures':
          '1':
            'name': 'storage.type.class.spoon'
          '2':
            'name': 'entity.name.type.class.spoon'
          '3':
            'name': 'keyword.control.inheritance.spoon'
          '4':
            'name': 'entity.other.inherited-class.spoon'
        'match': '(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?'
        'name': 'meta.class.spoon'
      }
    ]

  'function':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.parameter.function.spoon'
          '2':
            'name': 'keyword.operator.spoon'
          '3':
            'name': 'entity.other.inherited-class.spoon'
          '4':
            'name': 'storage.type.function.spoon'

        'match': '(?:\\(([^()]*)?\\)\\s*(?:\\s*(:)\\s*(\\w[-\\w]+))?)?\\s*([=-]>)'
        'name': 'meta.inline.function.spoon'
      }
      {
        'match': '''(?x)
                    (?<=^|\\s)
                    (?=@?[a-zA-Z\\$_])
                    @?([a-zA-Z\\$_][-\\w]*)(\\$|:|\\.)?\\s*
                    (?=[:=](\\s*\\(.*\\))?\\s*(?:\\s*(:)\\s*(\\w[-\\w]+))?\\s*([=-]>))
                  '''
        'captures':
          '1':
            'name': 'entity.name.function.spoon'
          '3':
            'name': 'variable.parameter.function.spoon'
          '4':
            'name': 'keyword.operator.spoon'
          '5':
            'name': 'entity.other.inherited-class.spoon'
          '6':
            'name': 'storage.type.function.spoon'
        'name': 'meta.function.spoon'
      }
      {
        'match': '@?\\b(?!class|extends|decodeURI(Component)?|encodeURI(Component)?|parse(Float|Int)|import)(\\w[-\\w]*)(?=\\s+(?!(to|in|is|isnt|and|or|for|else|when|not|if)\\b)(?=(@?\\w[-\\w]*|\\->|\\-\\d|\\[|\\{|\"|\'))|(?=[\\(!]))'
        'captures':
          '4':
            'name': 'entity.name.function.spoon'
      }
      {
        'captures':
          '1':
            'name': 'keyword.operator.spoon'
          '2':
            'name': 'entity.other.inherited-class.spoon'
          '3':
            'name': 'storage.type.function.spoon'

        'match': '(?:\\s*(:)\\s*(\\w[-\\w]+))?\\s*([=-]>)'
        'name': 'meta.inline.function.spoon'
      }
    ]

  'assign':
    'patterns': [
      {
        'match': '([a-zA-Z$_][-\\w$]*)\\s*(?:((?:or|and|[-+\\/&%*?])?=)(?![>=]))(?!(\\s*\\(.*\\))?\\s*([=-]>))'
        'captures':
          '1':
            'name': 'variable.assignment.spoon'
          '2':
            'name': 'punctuation.separator.key-value'
          '3':
            'name': 'keyword.operator.spoon'
      }
      {
        'begin': '(?<=\\s|^)(\\{)(?=.+?\\}\\s+=)'
        'beginCaptures':
          '0':
            'name': 'keyword.operator.spoon'
        'end': '(\\}\\s*=)'
        'endCaptures':
          '0':
            'name': 'keyword.operator.spoon'
        'name': 'meta.variable.assignment.destructured.object.spoon'
        'patterns': [
          {
            'include': '#variable'
          }
          {
            'include': '#string'
          }
          {
            'include': '#numeric'
          }
        ]
      }
      {
        'begin': '(?<=\\s|^)(\\[)(?=.+?\\]\\s+=)'
        'beginCaptures':
          '0':
            'name': 'keyword.operator.spoon'
        'end': '(\\]\\s*=)'
        'endCaptures':
          '0':
            'name': 'keyword.operator.spoon'
        'name': 'meta.variable.assignment.destructured.array.spoon'
        'patterns': [
          {
            'include': '#variable'
          }
          {
            'include': '#string'
          }
          {
            'include': '#numeric'
          }
        ]
      }
    ]

  'comment':
    'patterns': [
      {
        'begin': '(?<!#)###(?!#)'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.spoon'
        'end': '###(?:[ \\t]*\\n)'
        'name': 'comment.block.spoon'
        'patterns': [
          {
            'match': '(?<=^|\\s)@\\w*(?=\\s)'
            'name': 'storage.type.annotation.spoon'
          }
        ]
      }
      {
        'match': '(#).*$'
        'name': 'comment.line.number-sign.spoon'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.spoon'
      }
    ]

  'regexp':
    'patterns': [
      {
        'begin': '/{3}'
        'end': '(/{3})[imgy]{0,4}'
        'name': 'string.regexp.spoon'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.js'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.js'

        'patterns': [
          {
            'include': '#heregexp'
          }
        ]

      }
      {
        'begin': '/(?=(?![ /*+?])([^\\\\]|\\\\.)*?/[igmy]{0,4}(?![a-zA-Z0-9]))'
        'end': '(/)[imgy]{0,4}'
        'name': 'string.regexp.spoon'
        'patterns': [
          {
            'include': 'source.js.regexp'
          }
        ]
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.js'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.begin.js'
      }
    ]

  'variable':
    'patterns': [
      {
        'include': '#instance_variable'
        'include': '#variable_name'
      }
    ]

  'instance_variable':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.other.readwrite.instance.spoon'
          '2':
            'name': 'keyword.operator.spoon'
          '3':
            'name': 'entity.other.inherited-class.spoon'
        'match': '@(?:([a-zA-Z_\\$][-\\w]*)(?:\\s*(:)\\s*(\\w[-\\w]+))?)?'
        'name': 'variable.other.readwrite.instance.spoon'
      }
    ]

  'variable_name':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.assignment.spoon'
          '2':
            'name': 'variable.assignment.spoon'
          '3':
            'name': 'keyword.operator.spoon'
          '4':
            'name': 'entity.other.inherited-class.spoon'
        'match': '([a-zA-Z\\$_][-\\w]*(\\.\\w[-\\w]*)*)(?:\\s*(:)\\s*(\\w[-\\w]+))?'
        'name': 'variable.assignment.spoon'
      }
    ]

  'numeric':
    'patterns': [
      {
        'match': '(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b'
        'name': 'constant.numeric.spoon'
      }
    ]

  'heredoc':
    'patterns': [
      {
        'begin': '\'\'\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.spoon'
        'end': '\'\'\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.spoon'
        'name': 'string.quoted.heredoc.spoon'
      }
      {
        'begin': '"""'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.spoon'
        'end': '"""'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.spoon'
        'name': 'string.quoted.double.heredoc.spoon'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.spoon'
          }
          {
            'include': '#interpolated'
          }
        ]
      }
    ]

  'string':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.spoon'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.spoon'
        'name': 'string.quoted.single.spoon'
        'patterns': [
          {
            'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.spoon'
          }
        ]
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.spoon'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.spoon'
        'name': 'string.quoted.double.spoon'
        'patterns': [
          {
            'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
            'name': 'constant.character.escape.spoon'
          }
          {
            'include': '#interpolated'
          }
        ]
      }
    ]

  'interpolated':
    'patterns': [
      {
        'begin': '\\#\\{'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.spoon'
        'end': '\\}'
        'name': 'source.spoon.embedded.source'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]

  'regex-character-class':
    'patterns': [
      {
        'match': '\\\\[wWsSdD]|\\.'
        'name': 'constant.character.character-class.regexp'
      }
      {
        'match': '\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'match': '\\\\c[A-Z]'
        'name': 'constant.character.control.regexp'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]

  'heregexp':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()((\\?=)|(\\?!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '3':
            'name': 'meta.assertion.look-ahead.regexp'
          '4':
            'name': 'meta.assertion.negative-look-ahead.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.assertion.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '\\((\\?:)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
        'name': 'constant.other.character-class.set.regexp'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.character.numeric.regexp'
              '2':
                'name': 'constant.character.control.regexp'
              '3':
                'name': 'constant.character.escape.backslash.regexp'
              '4':
                'name': 'constant.character.numeric.regexp'
              '5':
                'name': 'constant.character.control.regexp'
              '6':
                'name': 'constant.character.escape.backslash.regexp'
            'match': '(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class'
          }
        ]
      }
      {
        'include': '#regex-character-class'
      }
      {
        'include': '#interpolated'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.spoon'
        'match': '(?<!\\\\)(#).*$\\n?'
        'name': 'comment.line.number-sign.spoon'
      }
    ]
